Algorithm:

A median is to Divide array into two equal parts.
we take a example in 4.png.
Here idea is to find midA and midB that make midA + midB = (nums1.length+nums2.length)/2 (Up and down 1)  and nums1[midA-1] <= nums2[midB] && nums2[midB-1] <= nums1[midA]  ,the median of the two sorted arrays must come fron nums1[midA-1] or nums1[midA] or nums2[midB] or nums2[midB].(We have assumed that nums1 is less than nums2)

Next we explain why.

First,we call the median of the two sorted arrays FinalMedian.FinalMedian divide the array merged by two sorted arrays nums1 and nums2 into two equal parts LeftFinal and RightFinal.
Here we need to be sure that number of LeftFinal equal RightFinal (Up and down 1) and Maxvalue of LeftFinal less than Minvalue of RightFinal.
So,num1[0~(midA-1)] + num2[0~(midB-1)] forms LeftFinal and num1[midA~] + num2[midB~] forms RightFinal.Due to sorted array,Maxvalue of LeftFinal is nums1[midA-1] or num2[midB],Minvalue of RightFinal is num1[midA] or num2[midB].We know num1[midA-1] less than num1[midA] and num2[midB-1] less than num2[midB],we need to do is to compare nums1[midA-1] <= nums2[midB] && nums2[midB-1] <= nums1[midA].

Next,we have to determine which value to choose as median. Suppose length of the first array is m, and second array is n. i.e.

Case m + n is odd：midA + midB = (nums1.length+nums2.length)/2.LeftFinal has a more element than RightFinal. FinalMedian is Maxvalue of nums1[midA-1] and num2[midB-1].


Case m + n is even:FinalMedian is (Maxvalue of LeftFinal + Minvalue of RightFinal)/2.

Special case:midA or midB =0. judge for yourself.




Complexity Analysis

Time complexity: O(log(n)).  We did a binary search on the shorter array.Binary search  costs  O(log(min(nums1，nums2))) time.

Space complexity: O(1). Just find some elements.

